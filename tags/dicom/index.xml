<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>DICOM | Zheng Zhang</title>
    <link>https://zhangresearch.org/tags/dicom/</link>
      <atom:link href="https://zhangresearch.org/tags/dicom/index.xml" rel="self" type="application/rss+xml" />
    <description>DICOM</description>
    <generator>Source Themes Academic (https://sourcethemes.com/academic/)</generator><language>en-us</language><copyright>© 2015–2019, Zheng Zhang</copyright><lastBuildDate>Mon, 15 Apr 2019 00:19:00 +0000</lastBuildDate>
    <image>
      <url>https://zhangresearch.org/img/icon.png</url>
      <title>DICOM</title>
      <link>https://zhangresearch.org/tags/dicom/</link>
    </image>
    
    <item>
      <title>Modify multiple elements of a Numpy ndarray with ravel_multi_index</title>
      <link>https://zhangresearch.org/post/numpy-unravel-index/</link>
      <pubDate>Mon, 15 Apr 2019 00:19:00 +0000</pubDate>
      <guid>https://zhangresearch.org/post/numpy-unravel-index/</guid>
      <description>

&lt;h2 id=&#34;indexing-a-multi-dimensional-numpy-array&#34;&gt;Indexing a multi-dimensional Numpy array&lt;/h2&gt;

&lt;p&gt;Accessing a multi-dimensional Numpy array by indices is useful for many tasks, such as &lt;a href=&#34;parse-dicom-rtstruct-into-binary-masks&#34; target=&#34;_blank&#34;&gt;parsing the contours in a DICOM-RTSTRUCT file&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;As a simple example, we are given a 5 x 6 array &lt;em&gt;arr&lt;/em&gt;, and a list of the coordinates of 3 points &lt;em&gt;coords&lt;/em&gt;:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; import numpy as np
&amp;gt;&amp;gt;&amp;gt; arr = np.arange(30).reshape(5,6)
&amp;gt;&amp;gt;&amp;gt; coords = np.array([[0, 1], [3, 4], [3, 2]])
&amp;gt;&amp;gt;&amp;gt; arr
array([[ 0,  1,  2,  3,  4,  5],
       [ 6,  7,  8,  9, 10, 11],
       [12, 13, 14, 15, 16, 17],
       [18, 19, 20, 21, 22, 23],
       [24, 25, 26, 27, 28, 29]])       
&amp;gt;&amp;gt;&amp;gt; coords
array([[0, 1],
       [3, 4],
       [3, 2]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;To obtain the values of the targeted pixels as a list [arr[0,1], arr[3,4], arr[3,2]], that is [1, 22, 20], it is tempting to write &amp;ldquo;arr[coords]&amp;ldquo;. But this is incorrect.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; arr[coords]
array([[[ 0,  1,  2,  3,  4,  5],
        [ 6,  7,  8,  9, 10, 11]],

       [[18, 19, 20, 21, 22, 23],
        [24, 25, 26, 27, 28, 29]],

       [[18, 19, 20, 21, 22, 23],
        [12, 13, 14, 15, 16, 17]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Using a list of indices like this is correct in MATLAB, but not in Numpy. Why?&lt;/p&gt;

&lt;h2 id=&#34;fancy-indexing&#34;&gt;Fancy indexing&lt;/h2&gt;

&lt;p&gt;Passing an &lt;em&gt;array&lt;/em&gt; of indices to access multiple elements at once is referred to as &lt;a href=&#34;https://jakevdp.github.io/PythonDataScienceHandbook/02.07-fancy-indexing.html&#34; target=&#34;_blank&#34;&gt;Fancy Indexing&lt;/a&gt; in Numpy.&lt;/p&gt;

&lt;p&gt;The most important rule to remember is that:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;The (broadcasted) shape of the index array determines that of the output array.&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; coords.shape
(3, 2)
&amp;gt;&amp;gt;&amp;gt; arr[coords].shape
(3, 2, 6)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Fancy indexing is basically a way to avoid writing Python loops, by having numpy do it internally for you with its more efficient, lower-level loops.&lt;/p&gt;

&lt;p&gt;In this case, arr[coords] is actually sampling the &lt;strong&gt;rows&lt;/strong&gt; rather than the elements. Conceptually, we get:&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array([[arr[0], arr[1]],
       [arr[3], arr[4]],
       [arr[3], arr[2]]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code&gt;array([[0th row, 1st row],
       [3rd row, 4th row],
       [3rd row, 2nd row]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;The correct way is to first obtain both the column and row indices as two lists (1D arrays), and then pass them to arr for fancy indexing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; rows = coords[:,0]
&amp;gt;&amp;gt;&amp;gt; cols = coords[:,1]
&amp;gt;&amp;gt;&amp;gt; arr[rows, cols]
array([ 1, 22, 20])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;numpy-unravel-index&#34;&gt;numpy.unravel_index&lt;/h2&gt;

&lt;p&gt;Another approach would be to access the multi-dimensional array as a 1D array.&lt;/p&gt;

&lt;p&gt;In C++, accessing a multi-dimensional array can be done as though it were a 1D array: &amp;ldquo;arr[col][row]&amp;rdquo; is equivalent to &amp;ldquo;arr[(row-1)*n_cols + col]&amp;ldquo;. This is because that multi-dimensional array is allocated on a contiguous span of memory, which is 1D. &amp;ldquo;(row-1)*n_cols + col&amp;rdquo; is basically how &lt;em&gt;deep&lt;/em&gt; you&amp;rsquo;re into this span of memory.&lt;/p&gt;

&lt;p&gt;The internal data representation of a Numpy array is conceptually the same. You can use &lt;em&gt;ravel()&lt;/em&gt; to obtain a 1D view of the array without copying, and use &amp;ldquo;&lt;a href=&#34;https://docs.scipy.org/doc/numpy-1.14.0/reference/generated/numpy.ravel_multi_index.html&#34; target=&#34;_blank&#34;&gt;ravel_multi_index()&lt;/a&gt;&amp;rdquo; to translate the indices into 1D.&lt;/p&gt;

&lt;p&gt;ravel_multi_index() and &lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/generated/numpy.unravel_index.html&#34; target=&#34;_blank&#34;&gt;numpy.unravel_index()&lt;/a&gt; are inverse operations. Their MATLAB equivalents are &lt;a href=&#34;https://www.mathworks.com/help/matlab/ref/sub2ind.html&#34; target=&#34;_blank&#34;&gt;sub2ind&lt;/a&gt; and &lt;a href=&#34;https://www.mathworks.com/help/matlab/ref/ind2sub.html&#34; target=&#34;_blank&#34;&gt;ind2sub&lt;/a&gt;.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; arr.ravel()[np.ravel_multi_index(coords.T, arr.shape)]
array([ 1, 22, 20])
&lt;/code&gt;&lt;/pre&gt;

&lt;h2 id=&#34;modify-multiple-elements-at-once&#34;&gt;Modify multiple elements at once&lt;/h2&gt;

&lt;p&gt;It is worth noting that, using either fancy indexing method, not only you can read out the elements, but also modify them at once.&lt;/p&gt;

&lt;p&gt;This is particularly useful if you need to parse the discrete contour points into a 2D map like below.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zhangresearch.org/img/numpy-unravel-index/contour.png&#34; alt=&#34;contour&#34; /&gt;&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; img = np.zeros((5,6)).astype(bool)
&amp;gt;&amp;gt;&amp;gt; img
array([[False, False, False, False, False, False],
       [False, False, False, False, False, False],
       [False, False, False, False, False, False],
       [False, False, False, False, False, False],
       [False, False, False, False, False, False]])
&amp;gt;&amp;gt;&amp;gt; img[rows, cols] = True
&amp;gt;&amp;gt;&amp;gt; img
array([[False,  True, False, False, False, False],
       [False, False, False, False, False, False],
       [False, False, False, False, False, False],
       [False, False,  True, False,  True, False],
       [False, False, False, False, False, False]])
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;&amp;gt;&amp;gt;&amp;gt; img.ravel()[np.ravel_multi_index(coords.T, img.shape)] = True
&amp;gt;&amp;gt;&amp;gt; img
array([[False,  True, False, False, False, False],
       [False, False, False, False, False, False],
       [False, False, False, False, False, False],
       [False, False,  True, False,  True, False],
       [False, False, False, False, False, False]])
&lt;/code&gt;&lt;/pre&gt;
</description>
    </item>
    
    <item>
      <title>Parse DICOM RTSTRUCT (Radiotherapy Structure Set) into binary masks using Numpy</title>
      <link>https://zhangresearch.org/post/parse-dicom-rtstruct-into-binary-masks/</link>
      <pubDate>Sat, 09 Mar 2019 00:20:00 +0000</pubDate>
      <guid>https://zhangresearch.org/post/parse-dicom-rtstruct-into-binary-masks/</guid>
      <description>

&lt;h2 id=&#34;dicom-rtstruct-contour-data&#34;&gt;DICOM-RTSTRUCT Contour Data&lt;/h2&gt;

&lt;p&gt;Contours drawn for radiotherapy are saved as &lt;a href=&#34;http://dicom.nema.org/dicom/2013/output/chtml/part03/sect_A.19.html&#34; target=&#34;_blank&#34;&gt;DICOM RT Structure Set&lt;/a&gt; (&amp;ldquo;RT&amp;rdquo; stands for radiotherapy.) in DICOM Standard, and usually as a single file. You can locate this file among CT or MRI data sets quite reliably, by traversing recursively through the directories and looking for MODALITY of &amp;ldquo;RTSTRUCT&amp;rdquo;.&lt;/p&gt;

&lt;p&gt;In this modality, the contours are saved as 2D polygons slice by slice under the &lt;a href=&#34;http://dicom.nema.org/MEDICAL/dicom/2017b/output/chtml/part03/sect_C.8.8.6.html&#34; target=&#34;_blank&#34;&gt;Contour Data (3006,0050)&lt;/a&gt; tag, which species the data format as:&lt;/p&gt;

&lt;blockquote&gt;
&lt;p&gt;Sequence of (x,y,z) triplets defining a contour in the patient based coordinate system described in &lt;a href=&#34;http://dicom.nema.org/MEDICAL/dicom/2017b/output/chtml/part03/sect_C.7.6.2.html#sect_C.7.6.2.1.1&#34; target=&#34;_blank&#34;&gt;Section C.7.6.2.1.1 (mm)&lt;/a&gt;. See &lt;a href=&#34;http://dicom.nema.org/MEDICAL/dicom/2017b/output/chtml/part03/sect_C.8.8.6.html#sect_C.8.8.6.1&#34; target=&#34;_blank&#34;&gt;Section C.8.8.6.1&lt;/a&gt; and &lt;a href=&#34;http://dicom.nema.org/MEDICAL/dicom/2017b/output/chtml/part03/sect_C.8.8.6.3.html&#34; target=&#34;_blank&#34;&gt;Section C.8.8.6.3&lt;/a&gt;.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;In other words, the perimeter of a sliced contour is specified by a sequence of discrete points.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;[x0, y0, z0, x1, y1, z1, x2, y2, z2, ... xn, yn, zn]
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;This can be reshaped to (n+1)*3, representing n+1 points along this perimeter.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;
pixelCoords = np.array([[x0, y0, z0],
                        [x1, y1, z1],
                        [x2, y2, z2], 
                        ...
                        [xn, yn, zn],
                        ])

&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;For example, the image below is a CT slice of a &lt;a href=&#34;https://github.com/SlicerRt/SlicerRtData/tree/master/eclipse-8.1.20-phantom-prostate&#34; target=&#34;_blank&#34;&gt;prostate phantom&lt;/a&gt; overlaid with these discrete points.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zhangresearch.org/img/parse-dicom-rtstruct-into-binary-masks/overlay.png&#34; alt=&#34;overlay&#34; /&gt;&lt;/p&gt;

&lt;h2 id=&#34;contours-as-discrete-points&#34;&gt;Contours as discrete points&lt;/h2&gt;

&lt;p&gt;To generate a 2D representation of these discrete points, you will need to first convert the Contour Data from real word units (mm) to Pixel Coordinates (integers).&lt;/p&gt;

&lt;p&gt;I usually first generate an all-false boolean 2D array&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import numpy as np
arr = np.zeros(shape).astype(bool)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Then change those Contour Data pixels to True using fancy indexing.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;cols = pixelCoords[:,0]
rows = pixelCoords[:,1]
arr[cols, rows] = True # Note the order of indices (cols before rows)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Another approach would be using &lt;em&gt;&lt;a href=&#34;https://docs.scipy.org/doc/numpy/reference/generated/numpy.unravel_index.html&#34; target=&#34;_blank&#34;&gt;numpy.unravel_index&lt;/a&gt;&lt;/em&gt;. I describe this method in better details in a &lt;a href=&#34;../numpy-unravel-index&#34;&gt;separate post&lt;/a&gt;.&lt;/p&gt;

&lt;h2 id=&#34;contours-as-binary-mask&#34;&gt;Contours as binary mask&lt;/h2&gt;

&lt;p&gt;&lt;img src=&#34;https://zhangresearch.org/img/parse-dicom-rtstruct-into-binary-masks/mask.png&#34; alt=&#34;mask&#34; /&gt;&lt;/p&gt;

&lt;p&gt;Binary masks as shown above can be useful for things like pixel-wise semantic segmentation in deep learning. To create these masks, you might attempt to treat these points as a &lt;a href=&#34;https://en.wikipedia.org/wiki/Point_cloud&#34; target=&#34;_blank&#34;&gt;point cloud&lt;/a&gt;, and calculate their &lt;a href=&#34;https://en.wikipedia.org/wiki/Alpha_shape&#34; target=&#34;_blank&#34;&gt;alpha shape&lt;/a&gt;. For concaved shapes, finding the correct parameter to draw the correct envelope can be &lt;a href=&#34;http://blog.thehumangeo.com/2014/05/12/drawing-boundaries-in-python/&#34; target=&#34;_blank&#34;&gt;tricky&lt;/a&gt;. In a field that focuses as much on reducing errors and uncertainties as Radiation Oncology, this method is simply not generic/robust enough.&lt;/p&gt;

&lt;p&gt;Luckily, the DICOM-RT file exported by treatment planning systems preserve the &amp;ldquo;connectivity&amp;rdquo; between the points, that is, they are saved consecutively either clockwise or counter-clockwise.&lt;/p&gt;

&lt;p&gt;&lt;img src=&#34;https://zhangresearch.org/img/parse-dicom-rtstruct-into-binary-masks/clockwise.png&#34; alt=&#34;clockwise&#34; /&gt;&lt;/p&gt;

&lt;p&gt;It turns out that the easiest approach to fill this contour is simply draw a filled polygon and cast that into a boolean 2D array.&lt;/p&gt;

&lt;p&gt;You can do this with OpenCV:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;import cv2
arr = np.zeros(shape)
poly = pixelCoords[:,:2]
cv2.fillPoly(img=arr, pts=[poly], color=1)
mask = img.astype(bool)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;or with Scikit-image:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&#34;language-python&#34;&gt;from skimage import draw
vertex_col_coords = pixelCoords[:, 0]
vertex_row_coords = pixelCoords[:, 1]

fill_row_coords, fill_col_coords = draw.polygon(vertex_row_coords, vertex_col_coords, shape)
mask = np.zeros(shape, dtype=np.bool)
mask[fill_row_coords, fill_col_coords] = True
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&lt;img src=&#34;https://zhangresearch.org/img/parse-dicom-rtstruct-into-binary-masks/filled-polygon.png&#34; alt=&#34;filled-polygon&#34; /&gt;&lt;/p&gt;
</description>
    </item>
    
  </channel>
</rss>
