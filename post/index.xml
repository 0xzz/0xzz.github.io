<?xml version="1.0" encoding="utf-8" standalone="yes" ?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on Zheng Zhang</title>
    <link>https://zhangresearch.org/post/</link>
    <description>Recent content in Posts on Zheng Zhang</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <copyright>&amp;copy; 2015-{year}, Zheng Zhang, Ph.D.</copyright>
    <lastBuildDate>Thu, 16 May 2019 00:19:00 +0000</lastBuildDate>
    
	<atom:link href="https://zhangresearch.org/post/index.xml" rel="self" type="application/rss+xml" />
    
    
    <item>
      <title>Compile VTK 8.2.0 with Visual Studio 2019 under Windows 10</title>
      <link>https://zhangresearch.org/post/compile-vtk-8.2.0/</link>
      <pubDate>Thu, 16 May 2019 00:19:00 +0000</pubDate>
      
      <guid>https://zhangresearch.org/post/compile-vtk-8.2.0/</guid>
      <description>The Visualization Toolkit (VTK) is the 3D engine behind many scientific visualization applications, such as MayaVi, the popular scientific data visualizer for Python. It is also the cornerstone of several advanced 3D-enabled biomedical applications, such as ParaView and 3D Slicer.
Perhaps lesser known, VTK provides a built-in high performance DICOM parser, because of its deep roots within the biomedical community. For my own clinical project, I have recently started learning and using VTK.</description>
    </item>
    
    <item>
      <title>Access the elements of Numpy arrays with fancy indexing or ravel_multi_index</title>
      <link>https://zhangresearch.org/post/numpy-unravel-index/</link>
      <pubDate>Mon, 15 Apr 2019 00:19:00 +0000</pubDate>
      
      <guid>https://zhangresearch.org/post/numpy-unravel-index/</guid>
      <description>Indexing a multi-dimensional Numpy array Accessing a multi-dimensional Numpy array by indices is useful for many tasks, such as parsing the contours in a DICOM-RTSTRUCT file.
For example, given a 5 x 6 array arr, and a list of the coordinates of 3 points coords:
&amp;gt;&amp;gt;&amp;gt; import numpy as np &amp;gt;&amp;gt;&amp;gt; arr = np.arange(30).reshape(5,6) &amp;gt;&amp;gt;&amp;gt; coords = np.array([[0, 1], [3, 4], [3, 2]]) &amp;gt;&amp;gt;&amp;gt; arr array([[ 0, 1, 2, 3, 4, 5], [ 6, 7, 8, 9, 10, 11], [12, 13, 14, 15, 16, 17], [18, 19, 20, 21, 22, 23], [24, 25, 26, 27, 28, 29]]) &amp;gt;&amp;gt;&amp;gt; coords array([[0, 1], [3, 4], [3, 2]])  To obtain the values of the targeted pixels as a list [arr[0,1], arr[3,4], arr[3,2]], that is [1, 22, 20], it is tempting to write &amp;ldquo;arr[coords]&amp;ldquo;.</description>
    </item>
    
    <item>
      <title>Parse DICOM RTSTRUCT (Radiotherapy Structure Set) into binary masks using Numpy</title>
      <link>https://zhangresearch.org/post/parse-dicom-rtstruct-into-binary-masks/</link>
      <pubDate>Wed, 13 Mar 2019 00:19:00 +0000</pubDate>
      
      <guid>https://zhangresearch.org/post/parse-dicom-rtstruct-into-binary-masks/</guid>
      <description>DICOM-RTSTRUCT Contour Data Contours drawn for radiotherapy are saved as DICOM RT Structure Set (&amp;ldquo;RT&amp;rdquo; stands for radiotherapy.) in DICOM Standard, and usually as a single file. You can locate this file among CT or MRI data sets quite reliably, by traversing recursively through the directories and looking for MODALITY of &amp;ldquo;RTSTRUCT&amp;rdquo;.
In this modality, the contours are saved as 2D polygons slice by slice under the Contour Data (3006,0050) tag, which species the data format as:</description>
    </item>
    
  </channel>
</rss>